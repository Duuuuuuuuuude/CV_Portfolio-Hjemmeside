# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

### THIS PIPELINE RUNS THIRD AND AFTER THE "CI_playwright-azure-pipeline" PIPELINE ###
trigger: none # Trigger is located at the bottom of this pipeline.

resources:
- repo: self

variables:
- group: Container-Registry-do

stages: 
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build, push and publish artifact
    pool:
      vmImage: ubuntu-latest
    steps:

    # Build and push are not part of the same task, and seperated by a garbage collection check,
    # to lower the chanch of an active garbage collection starting between the garbage collection check and the push.
    - task: Docker@2
      displayName: 'Building Docker image'
      inputs:
        containerRegistry: $(containerRegistry)
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        buildContext: '.'
        tags: '$(tag)'

    # Imaged can't be pushed when there is an active garbage collection running, 
    # this will not let the push happen until after the garbage collection is finished, if there is one.
    - task: Bash@3
      displayName: 'Waits for the garbage collection to be done, if necessary'
      inputs:
        filePath: 'Azure-Pipelines/Bash Scripts/Image Push Retention - Wait For The Garbage Collection To Be Done.sh'
        failOnStderr: true
      env:
        bearerTokenContainerRegistry: $(bearerTokenContainerRegistry)
        containerRegistryAPIBaseURL: $(containerRegistryAPIBaseURL)

    - task: Docker@2
      displayName: 'Pushing the image to the container registry'
      inputs:
        containerRegistry: $(containerRegistry)
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - script: |
        docker images
      displayName: 'List Docker images'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Koldste.dev.Web/Manifests'
        artifact: 'Manifests'
        publishLocation: 'pipeline'


    - script: |
        echo $(System.AccessToken) | az devops login

        az pipelines run --name CD_Docker-Deploy-pipeline --branch main

        az devops logout
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
      displayName: 'Trigger for CD_Docker-Deploy-pipeline'
