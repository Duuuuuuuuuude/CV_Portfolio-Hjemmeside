# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

### THIS PIPELINE RUNS THIRD AND AFTER THE "CI_playwright-azure-pipeline" PIPELINE ###
trigger: none # Trigger is located at the bottom of this pipeline.

resources:
- repo: self

variables:
- group: Container-Registry-do

stages: 
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build, push and publish artifact
    pool:
      vmImage: ubuntu-latest
    steps:

    # To lower the risk of an active garbage collection starting between the garbage collection check and the push,
    # build and push are not part of the same task, and seperated by a garbage collection check.
    - task: Docker@2
      displayName: 'Building Docker image'
      inputs:
        containerRegistry: $(containerRegistryServiceConnection)
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: 'Koldste.dev.Web/Dockerfile'
        buildContext: '.'
        tags: '$(tag)'
    
    # Docker Scout CVE Report
    - task: Docker@2
      displayName: 'Docker login'
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        command: 'login'

    - task: CmdLine@2
      displayName: Find CVEs on image using Docker Scout
      inputs:
        script: |
          # Install the Docker Scout CLI
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
          docker scout cves $(containerRegistryURL)/$(registryName)/$(repositoryName):$(tag) --exit-code --only-severity critical,high
    - task: Docker@2
      displayName: Docker Logout
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        command: 'logout'

    - task: Bash@3
      displayName: 'Waits for the garbage collection to be done, if necessary'
      condition: eq(variables['Build.SourceBranchName'], 'main')
      inputs:
        filePath: 'Azure-Pipelines/Bash Scripts/Image Push Retention - Wait For The Garbage Collection To Be Done.sh'
        failOnStderr: true
      env:
        bearerTokenContainerRegistry: $(bearerTokenContainerRegistry)
        containerRegistryAPIBaseURL: $(containerRegistryAPIBaseURL)

    - task: Docker@2
      displayName: 'Pushing the image to the container registry'
      condition: eq(variables['Build.SourceBranchName'], 'main')
      inputs:
        containerRegistry: $(containerRegistryServiceConnection)
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - script: |
        # Uncomments the image property.
        sed -i "s|# image:|image:|" Koldste.dev.Web/Manifests/website-koldstedev/Deployment_koldstedev.yaml

        # Sets the name of the image property.
        sed -i "s|{{DOCKER_IMAGE_NAME}}|$(containerRegistryURL)/$(imageRepository)|g" Koldste.dev.Web/Manifests/website-koldstedev/Deployment_koldstedev.yaml

        # Replaces the imager property value's placeholder.
        sed -i "s|{{DOCKER_IMAGE_TAG}}|$(tag)|" Koldste.dev.Web/Manifests/website-koldstedev/Deployment_koldstedev.yaml
      condition: eq(variables['Build.SourceBranchName'], 'main')
      displayName: 'Replace Docker image name and tag in deployment manifest file'
        
    - task: PublishPipelineArtifact@1
      condition: eq(variables['Build.SourceBranchName'], 'main')
      inputs:
        targetPath: 'Koldste.dev.Web/Manifests'
        artifact: 'Manifests'
        publishLocation: 'pipeline'


    - script: |
        echo $(System.AccessToken) | az devops login

        az pipelines run --name CD_Docker-Deploy-pipeline --branch main

        az devops logout
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
      displayName: 'Trigger for CD_Docker-Deploy-pipeline'

    - script: |
        echo $(System.AccessToken) | az devops login

        az pipelines run --name Azure-repo-to-GitHub-repo-sync-pipeline --branch $(Build.SourceBranchName)

        az devops logout
      condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'development')))
      displayName: 'Trigger for Azure-repo-to-GitHub-repo-sync-pipeline'