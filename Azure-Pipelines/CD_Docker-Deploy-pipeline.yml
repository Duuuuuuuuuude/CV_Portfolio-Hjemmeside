### THIS PIPELINE RUNS FOURTH/LAST AND ALWAYS AFTER THE "CI_Docker-build-push-azure-pipeline" PIPELINE ###
trigger: none # Should only be triggered by a pipeline that publishes the Manifest artifact.

resources:
- repo: self

variables: 
- group: Container-Registry-do

stages:
- stage: Deploy
  
  displayName: Deploy stage
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: ubuntu-latest
    environment: koldstedev-do-kubernetes
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'specific'
              project: '$(project)'
              definition: '25'
              buildVersionToDownload: 'latestFromBranch'
              branchName: 'refs/heads/main'
              artifactName: 'Manifests'
              targetPath: '$(System.ArtifactsDirectory)/Manifests'

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(containerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'koldstedev-do-kubernetes-backend-1711399786755'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(System.ArtifactsDirectory)/Manifests/website-koldstedev/Deployment_koldstedev.yaml
                $(System.ArtifactsDirectory)/Manifests/website-koldstedev/Service_koldstedev.yaml
              imagePullSecrets: '$(imagePullSecret)'

  - job: validation
    dependsOn: Deploy
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: '$(notifyEmailAddress)'
        instructions: 'Reject to perform at rollback of the current deployment'
        onTimeout: 'resume'

  - deployment: rollback
    displayName: rollback
    dependsOn: validation
    condition: failed()
    environment: koldstedev-do-kubernetes
    strategy:
      runOnce:
        deploy:
          steps:

            - task: Kubernetes@1
              displayName: Kubernetes login
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'koldstedev-do-kubernetes-backend-1711399786755'
                namespace: '$(k8sNamespace)'
                command: 'login'
                
            - task: PowerShell@2
              displayName: rolling back
              inputs:
                targetType: 'inline'
                script: |
                    kubectl rollout undo deployment/koldstedev -n $(k8sNamespace)

            - task: Kubernetes@1
              displayName: Kubernetes logout
              inputs:
                command: 'logout'


- stage: Clean_up
  displayName: Clean up stage
  dependsOn: Deploy
  condition: succeeded('Deploy')
  jobs:
  - job: Clean_up
    displayName: Clean up
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Bash@3
      displayName: 'Clean up the container registry'
      inputs:
        filePath: 'Azure-Pipelines/Bash Scripts/Docker Container Registry Clean Up.sh'
        failOnStderr: true
      env:
        bearerTokenContainerRegistry: $(bearerTokenContainerRegistry)
        containerRegistryAPIBaseURL: $(containerRegistryAPIBaseURL)
        repositoryNameURLEncoded: $(repositoryNameURLEncoded)