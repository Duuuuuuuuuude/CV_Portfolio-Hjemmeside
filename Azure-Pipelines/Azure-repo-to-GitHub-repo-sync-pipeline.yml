# Before using: 
#   Set variables:
#       AzureDevOps.PAT
#       Github.PAT
#       PrivateEmail
#   Make sure git-filter-repo  file is in the root directory of the repo (same folder as the .git file). Located here: https://github.com/newren/git-filter-repo.

trigger: none # Triggered by the trigger pipeline.

pool:
  vmImage: 'windows-latest'

variables:
  publicName: 'Azure_Pipeline'
  publicEmail: '85315025+Duuuuuuuuuude@users.noreply.github.com'

steps:
# Installing Python
- task: UsePythonVersion@0
  displayName: Installing Python
  inputs:
    versionSpec: '3.x'
    addToPath: true

- task: PowerShell@2
  displayName: Syncing azure repo to github repo.
  inputs:
    targetType: 'inline'
    script: |
      ####################################################
      $stageDir = '$(Build.SourcesDirectory)' | Split-Path
            
      $githubDir = $stageDir +"\"+"gitHub"
      $destination = $githubDir +"\"+"CV_Portfolio-Hjemmeside.git"
      $alias = 'Duuuuuuuuuude:'+ "$(Github.PAT)"
      
      $sourceURL = 'https://$(AzureDevOps.PAT)@dev.azure.com/MartinKoldste/Koldste.dev/_git/CV_Portfolio-Hjemmeside'
      $destURL = 'https://' + $alias + '@github.com/Duuuuuuuuuude/CV_Portfolio-Hjemmeside.git'
            
      #Check if the parent directory exists and delete
      if((Test-Path -path $githubDir))
      {
        Remove-Item -Path $githubDir -Recurse -force
      }
      # Move the source/azure repo into a temporary local directory.
      if(!(Test-Path -path $githubDir))
      {
        New-Item -ItemType directory -Path $githubDir
        Set-Location $githubDir
        git clone --mirror $sourceURL
      }
       else
      {
        Write-Host "The given folder path $githubDir already exists";
      }
      
      # Set the location to the temporary local source/azure repo directory.
      Set-Location $destination
      
      # Set public email for all commits during sync
      git config --global user.name '$(publicName)'
      git config --global user.email '$(publicEmail)'
      
      # Filter-repo to remove private emails.
      #############################################
      # Add the path for git-filter-repo. 
      # It's important that the git-filter-repo file is in the root directory of the repo (same folder as the .git file). 
      # Located here: https://github.com/newren/git-filter-repo
      # Python also have to be installed. The code for that should be included in this .yml file at the top.
      # $env:PATH = "$env:PATH;$(Build.SourcesDirectory)\bin"
      $env:PATH = "$env:PATH;$(Build.SourcesDirectory)"
      
      $oldEmail = '$(PrivateEmail)'
      $correctName = '$(publicName)'
      $correctEmail = '$(publicEmail)'
      
      $env:GIT_AUTHOR_NAME = $correctName
      $env:GIT_AUTHOR_EMAIL = $correctEmail
      $env:GIT_COMMITTER_NAME = $correctName
      $env:GIT_COMMITTER_EMAIL = $correctEmail
      
      git filter-repo --commit-callback @"
      if (commit.author_email == b'$oldEmail'):
        commit.author_name = b'$correctName'
        commit.author_email = b'$correctEmail'
      if (commit.committer_email == b'$oldEmail'):
        commit.committer_name = b'$correctName'
        commit.committer_email = b'$correctEmail'
      "@
      Write-Output '*****Removes author name****'
      Remove-Item Env:GIT_AUTHOR_NAME
      
      Write-Output '*****Removes author Email****'
      Remove-Item Env:GIT_AUTHOR_EMAIL
      
      Write-Output '*****Removes author committer name****'
      Remove-Item Env:GIT_COMMITTER_NAME
      
      Write-Output '*****Removes author committer Email****'
      Remove-Item Env:GIT_COMMITTER_EMAIL
      
      # Adds a remote to the temporary local azure repo.
      Write-Output '*****Git remote add****'
      git remote add --mirror=fetch secondary $destURL
      
      # Get commits and refs from the primary repo () temporary local azure repo.
      Write-Output '*****Git fetch origin****'
      git fetch $sourceURL
      
      # Push to secondary.
      Write-Output '*****Git push secondary****'
      git push secondary --all --force
            
      Write-Output '**Azure Devops repo synced with Github repo**'
      Set-Location $stageDir
      
      Write-Output '**Clean up**'
      if((Test-Path -path $githubDir))
      {
        Remove-Item -Path $githubDir -Recurse -force
      }
    # Was causing failures, because of errors that didn't look like real errors.
    # failOnStderr: true
    showWarnings: true