# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
- group: Container-Registry-do
- name: containerRegistryServiceConnection
  value: 'azure_pipeline/DigitalOcean-ContainerRegistry/koldste.dev'

  # release pipeline variables
  # - group: Container-Registry-do
- name: imagePullSecret
  value: azure-secret-registry-$(registryName)
- name: k8sNamespace
  value: backend
- name: containerRegistryURL
  value: 'registry.digitalocean.com'
- name: containerRegistryAPIBaseURL
  value: 'https://api.digitalocean.com/v2/registry/$(registryName)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build, push and publish artifact
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: 'Build and push an image to container registry'
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '.'
        tags: '$(tag)'
        
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'Manifests'
        path: 'Koldste.dev.Web/Manifests'



# Release pipeline
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: ubuntu-latest
    environment: koldstedev-do-kubernetes
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'Manifests'
              downloadPath: '$(System.ArtifactsDirectory)/Manifests'

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'koldstedev-do-kubernetes-backend-1711399786755'
              namespace: '$(k8sNamespace)'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: 'azure_pipeline/DigitalOcean-ContainerRegistry/koldste.dev'

          - script: |
              sed -i "s|{{DOCKER_IMAGE_NAME}}|$(containerRegistryURL)/$(imageRepository)|g" $(System.ArtifactsDirectory)/Manifests/website-koldstedev/Deployment_koldstedev.yaml
              sed -i "s|{{DOCKER_IMAGE_TAG}}|$(tag)|" $(System.ArtifactsDirectory)/Manifests/website-koldstedev/Deployment_koldstedev.yaml
            displayName: 'Replace Docker image name and tag in deployment manifest file'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'koldstedev-do-kubernetes-backend-1711399786755'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(System.ArtifactsDirectory)/Manifests/website-koldstedev/Deployment_koldstedev.yaml
                $(System.ArtifactsDirectory)/Manifests/website-koldstedev/Service_koldstedev.yaml
              imagePullSecrets: '$(imagePullSecret)'
              rolloutStatusTimeout: '180'
          
          # - script: |
          #     sudo snap install doctl
          #   displayName: 'Installs latest version of doctl'


          # - task: DockerInstaller@0
          #   inputs:
          #     dockerVersion: '17.09.0-ce'




          - task: Bash@3
            displayName: 'Clean up the container registry'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash

                min_to_keep=10
                delete_days_old=3
                verbose=yes
                repository=$(repositoryName)
                bearer_token_container_registry=$(bearerTokenContainerRegistry)
                container_registry_API_base_URL=$(containerRegistryAPIBaseURL)
                repository_name_URL_encoded=$(repositoryNameURLEncoded)

                response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X GET -H "Content-Type: application/json" -H "Authorization: Bearer "$bearer_token_container_registry"" ""$container_registry_API_base_URL"/repositories/"$repository_name_URL_encoded"/tags?per_page=200")

                # Separates the JSON response from the HTTP status
                http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                json_response=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')

                # Checks the HTTP status code and exits if the HTTP request failed. Also prints out the json body, if it failed and message if there was nothing to delete
                if [ $http_status -eq 404 ]; then
                    echo "Error: HTTP response $http_status"
                    [[ "$verbose" == "yes" ]] && echo "Nothing to delete"
                    exit 0
                elif [ $http_status -ne 200 ]; then
                    echo "Error: HTTP response $http_status"
                    echo "Response body: $json_response"
                    exit 1
                fi

                date_boundary=$(date -d"-$delete_days_old days" +%s)
                deletable_tags=$(echo $json_response | jq ".tags[] | .[10:] | .[] | select ( .updated_at | fromdateiso8601 < $date_boundary) | .tag " -r | tr '\n' ' ')
                # deletable_tags=$(curl --silent -X GET -H "Content-Type: application/json" -H "Authorization: Bearer "$bearer_token_container_registry"" ""$container_registry_API_base_URL"/repositories/"$repository_name_URL_encoded"/tags?per_page=200" | jq ".tags[] | select ( .updated_at | fromdateiso8601 < $date_boundary) | .tag " -r | tail -n +11 | tr '\n' ' ')

                # Check the exit status of jq for errors
                if [ $? -ne 0 ]; then
                    echo "Error: jq command failed"
                    exit 1
                fi
      
                [[ "$verbose" == "yes" ]] && {
                  echo "DELETING images in the container registry, that are more than $delete_days_old days"
                  echo "While KEEPING at least $min_to_keep of the newest images in the container registry"
                  echo ""
                  echo "Tags from the images being deleted:"
                  echo "Deleteable tags: $deletable_tags"
                }

                # Tags being deleted on the images.
                for tag in $deletable_tags; do
                  response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X DELETE -H "Content-Type: application/json" \
                    -H "Authorization: Bearer "$bearer_token_container_registry"" \
                    ""$container_registry_API_base_URL"/repositories/"$repository_name_URL_encoded"/tags/$tag")

                  # Separate the JSON response from the HTTP status
                  http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                  json_response=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')

                  # Checks the HTTP status error codes
                  if [ $http_status -ne 200 ]; then
                    echo "Error: HTTP response $http_status"
                    echo "Response body: $json_response"
                    if [ $http_status -ne 404 ]; then
                      exit 1
                    fi
                  fi
                done


                # This will delete images no longer used and untagged images.
                response=$(curl --write-out "HTTPSTATUS:%{http_code}" -X GET -H "Content-Type: application/json" \
                  -H "Authorization: Bearer "$bearer_token_container_registry"" \
                  ""$container_registry_API_base_URL"/registry/"$repository_name_URL_encoded"/garbage-collection")

                # Separate the JSON response from the HTTP status
                http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                json_response=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')

                # Checks the HTTP status error codes
                if [ $http_status -ne 200 ]; then
                  echo "Error: HTTP response $http_status"
                  echo "Response body: $json_response"
                  exit 1
                fi
              failOnStderr: true




          